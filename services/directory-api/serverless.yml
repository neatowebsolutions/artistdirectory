service: artistdirectory-directory-api
variablesResolutionMode: 20210326
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 2048
  timeout: 10
  endpointType: REGIONAL
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  versionFunctions: false
  logRetentionInDays: 14
  apiGateway:
    shouldStartNameWithService: true
  environment:
    ARTISTS_API_URL: ${env:ARTISTS_API_URL, ssm:/artistdirectory/${self:provider.stage}/artists-api/url}
    JWT_SECRET: ${env:JWT_SECRET, ssm:/artistdirectory/${self:provider.stage}/jwt-secret}
    REFRESH_JWT_SECRET: ${env:REFRESH_JWT_SECRET, ssm:/artistdirectory/${self:provider.stage}/refresh-jwt-secret}
    LOGS_API_URL: ${env:LOGS_API_URL, ssm:/artistdirectory/${self:provider.stage}/logs-api/url}
    LOG_QUEUE_URL: ${ssm:/artistdirectory/${self:provider.stage}/queues/log/url, ''}
    LOG_SOURCE: 'directory-api'
    NODE_ENV: ${env:NODE_ENV, 'production'}

custom:
  serverless-offline:
    host: 0.0.0.0
    httpPort: ${env:DIRECTORY_API_PORT, 3002}
    lambdaPort: 5002
  customDomain:
    domainName: ${ssm:/artistdirectory/${self:provider.stage}/directory-api/domain, ''}
    basePath: ''
    certificateName: ${ssm:/artistdirectory/${self:provider.stage}/certificate-name, ''}
    createRoute53Record: true
    endpointType: regional
    securityPolicy: tls_1_2
    autoDomain: true
  warmup:
    default:
      enabled: false
      concurrency: 5
      prewarm: false
      events:
        - schedule: rate(5 minutes)

functions:
  authorizer:
    handler: src/authorizer.handler
  health:
    memorySize: 128
    handler: src/routes/health.handler
    events:
      - http:
          path: /health
          method: get
          cors: true
    warmup:
      default:
        enabled: false
  checkProfileEmailValidity:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/emailValidate.handler
    events:
      - http:
          path: /profile/email-validity/{email}
          method: get
          cors: true
          # authorizer:
          #   name: authorizer
          #   type: request
          #   identitySource: method.request.header.Authorization
          #   resultTtlInSeconds: 0
  createArtist:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/createArtist.handler
    events:
      - http:
          path: /artists
          method: post
          cors: true
  # TODO - rename the route to something like /auth/signin
  createAccount:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/createAccount.handler
    events:
      - http:
          path: /accounts
          method: post
          cors: true
  authRefreshToken:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/authRefreshToken.handler
    events:
      - http:
          path: /auth/refresh
          method: post
          cors: true
          authorizer:
            name: authorizer
            type: request
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  findOneArtist:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/findOneArtist.handler
    events:
      - http:
          path: /artists/{artistId}
          method: get
          cors: true
  findOneArtistByField:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/findOneArtistByField.handler
    events:
      - http:
          path: /artists/{field}/{value}
          method: get
          cors: true
  updateProfileStatusByToken:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/updateProfileStatusByToken.handler
    events:
      - http:
          path: /reviews/token/{reviewToken}
          method: patch
          cors: true
  updateRejectedArtist:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/updateRejectedArtist.handler
    events:
      - http:
          path: /artists/edit-profile-token/{editProfileToken}
          method: patch
          cors: true
  findArtists:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/findArtists.handler
    events:
      - http:
          path: /artists
          method: get
          cors: true
  updateArtist:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/updateArtist.handler
    events:
      - http:
          path: /artists/{artistId}
          method: put
          cors: true
          authorizer:
            name: authorizer
            type: request
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  generateProfileUploadSignedUrl:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/generateProfileUploadSignedUrl.handler
    events:
      - http:
          path: /uploads/signed-url/profile
          method: post
          cors: true
  findCategories:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/findCategories.handler
    events:
      - http:
          path: /categories
          method: get
          cors: true
  createTag:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/createTag.handler
    events:
      - http:
          path: /tags
          method: post
          cors: true
          authorizer:
            name: authorizer
            type: request
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  findTags:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/findTags.handler
    events:
      - http:
          path: /tags
          method: get
          cors: true
  findSkills:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/findSkills.handler
    events:
      - http:
          path: /skills
          method: get
          cors: true
  findArtistProfile:
    role: ${env:SERVICES_CONSUMER_ROLE_ARN, ssm:/artistdirectory/${self:provider.stage}/roles/services-consumer-arn}
    handler: src/routes/findArtistProfile.handler
    events:
      - http:
          path: /profile
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: request
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
plugins:
  - serverless-offline
  - serverless-plugin-monorepo
  - serverless-domain-manager
  - serverless-plugin-warmup

package:
  patterns:
    - '!infrastructure/**'
